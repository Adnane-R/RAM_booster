working on rupdate and rchroot:

	If you want to work on rupdate and rchroot from within the RAM
	Session, it is best not to spend your time copying the scripts
	between the repo and /usr/sbin/. The best way to do this is to:

	$ sudo rm -v /usr/sbin/rchroot /usr/sbin/rupdate
	$ sudo ln -s RAM_Booster/extras_14.10/rupdate /usr/sbin/rupdate
	$ sudo ln -s RAM_Booster/extras_14.10/rchroot /usr/sbin/rchroot
	$ cd RAM_Booster
	$ git config core.fileMode false
	$ chmod a+x extra_14.10/rupdate
	$ chmod a+x extra_14.10/rchroot

	In case it's not obvious, this creates symlinks to the files
	directly in the git repo, and tells git to not care about the
	execute bit of the scripts.

	Note: "Not care" means keep whatever the script files had set for
	execute bits the last time git cared, which in this case was unset

	Note 2: This core.fileMode setting is NOT uploaded during pushes
	to the remote repo

rsync stdout can be hidden at boot by doing the following:

	Edit script
	After live boot installs (Just before 'echo -e "Packages installed successfully\n"' line), add:
		echo "Press Enter"
		read key
	Save and run script
	When script pauses, open different terminal and cd to /lib/live/boot
	Edit 9990-toram-todisk.sh 
	Comment out the 'echo " * Copying $MODULETORAMFILE to RAM" 1>/dev/console' line
	Change both 'rsync -a' lines to 'rsync -aq'
	Save file and continue script

Speed up rsync filesystem copy to /var/squashfs during testing:
	If you are testing this script in a VM over and over again, you can decrease the time
	it takes for the rsync command to copy the entire OS to /var/squashfs. In testing, the time
	needed to copy the FS decreased from about 7m to about 3m.

	Basically:
		1. Setup an NFS server somewhere, and create a share
		2. Create the directory /var/squashfs
		3. Mount the NFS share to /var/squashfs
		4. Make sure the RevertChanges function in the RAM_booster script does not delete /var/squashfs when running.
		5. When you revert to a VM snapshot, just follow steps 2, 3 and 4

	The first time, it will obivously take just as long to copy the FS. Every other time, rsync will see
	the similar files already on the NFS share and skip them. rsync runs with --delete, so it will take care of
	anything that should no longer be on the share.

===============================================================

Rewrite Notes:

	Generic:

		Delete the extra files and folders in the git repo
			Old 14.10 script
			dev_script.sh
			upstart_problem
			test

		Test my new script on Ubuntu 14.04

		Test everything with efi, XFS, and BTRFS (at least warn people if it doesn't work)
			Especially test if other filesystems (is reiserfs still around?) can run rchroot within rchroot because of the way I test for chroot

		Read all the messages I wrote to the user on screen - maybe I should reword some

		When user chooses to share home, should I warn them that until they reboot, /home will not be mounted, so none of that will be shared?

		Check that time is accurate

		Check that internet is available

		Is there anything else that needs to be logged?
			Check again when I'm done everything
			chroot and rupdate probably need a log too

		Write down the purpose of all my scripts and files so it's easier to understand

		What happens when /etc/fstab and the current FS is inconsistent?
			Ex:
				The RAM_Booster script just ran, and created a new entry for /home in /etc/fstab
				Immediately after, you uninstall, and run again
				At this point, you still haven't reboot, so the running system isn't using /dev/sdb1 as /home, but /etc/fstab is

		I still don't like the wording in the /var/lib/ram_booster/conf file
			It implies that the RAM Session should be using /dev/sda1 as it's home, when it's not - it just means the root partition should be the same as home

		Also, if /boot on the Original OS is NOT the same as /, it will be forced to be (which is good), but the /var/lib/ram_booster/conf file will show it as 
		/dev/sdb1 when in fact, the RAM Session will be using a fake boot
			FUNCTIONALLY, this works, and is exactly the way I designed it
			I just need the conf file to be clear about what the devices are referring to

	RAM_booster script itself:
		Add a header like my original script has with author name, date, etc

		For now, I skipped the part that asks if we should add
			a cron job for updates (CronAsk) since it's hard
			to test without a working RAM Session

		Split up long sed lines
			I can replace a line in the script file with itself plus my first line, and then
			have a second sed statement that replaces the line I just placed with itself and the
			next line

		When LVM is used, make sure the LOGGER gets info about how the volume groups and logical volumes are organized, so I can duplicate it

		I skipped the "Hardlink bug" fix - I couldn't remember what it fixes

		Skipped time bug fix. I'll see if I need it when the RAM Session is bootable

		Download counter
			Either:
				a)
					Do an md5 hash of the MAC Address
					or external IP of someone, and
					send it to some server I can check

					Warn users I'm doing this, and
					that I can't actually tell what
					their IP or MAC Address is
				b)
					See if github can already do the counting

		Disable RAM Session updates?

	rupdate script:

	rchroot script:

		I use the fact that / is inode 2 in normal root, and something else in a chroot environment
		to make sure the user can't run rchroot from rchroot. The thing is - that only works on ext[234]
		filesystems - apparently xfs uses inode 128. You can check with "ls -di /".
			Source: http://unix.stackexchange.com/questions/14345/how-do-i-tell-im-running-in-a-chroot
			Source: http://stackoverflow.com/questions/75182/detecting-a-chroot-jail-from-within
		
			Make sure my code works in xfs, lvm, and other filesystems. I may have to modify the if statment

			Update: The code was modified to work in XFS. Try lvm and maybe btrfs/reiserfs

	Other:
		add a way to automatically download new rupdate and rchroot

		The point of the rewrite is to make the code easier to read and debug
			Make sure the code doesn't become overly complex

		Maybe have a way to revert an update, which with git, should be
			pretty easy

	Do a video:
		Show that GUI apps can be run from rchroot
			Become a regular user, start up a GUI app, and change its settings to show you can do that
				Test it first - I don't actually know if it will work

	Thread on UF.org:
		Probably create a new thread

		Tell users to upload their log files if they have
			technical problems


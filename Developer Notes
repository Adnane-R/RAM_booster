PROBLEMS WITH 'COMMAND' FUNCTION:
	1. It does NOT return the exit code of the command
		Instead of running the command for the first time in the head of the for loop,
		do something like this:

			OUTPUT=$($@ 2>&1)
			EXIT_CODE=$?

		change
			for LINE in $("$@" 2>&1)
		to
			for LINE in $("$OUTPUT" 2>&1)

		and at the end of the function:
			return $EXIT_CODE

		Note: I have no idea if it'll work, but it's a start

	2. It does not deal with blank lines well - I think it just skips them


rsync stdout can be hidden at boot by doing the following:

	Edit script
	After live boot installs (Just before 'echo -e "Packages installed successfully\n"' line), add:
		echo "Press Enter"
		read key
	Save and run script
	When script pauses, open different terminal and cd to /lib/live/boot
	Edit 9990-toram-todisk.sh 
	Comment out the 'echo " * Copying $MODULETORAMFILE to RAM" 1>/dev/console' line
	Change both 'rsync -a' lines to 'rsync -aq'
	Save file and continue script

Speed up rsync filesystem copy to /var/squashfs during testing:
	If you are testing this script in a VM over and over again, you can decrease the time
	it takes for the rsync command to copy the entire OS to /var/squashfs. In testing, the time
	needed to copy the FS decreased from about 7m to about 3m.

	Basically:
		1. Setup an NFS server somewhere, and create a share
		2. Create the directory /var/squashfs
		3. Mount the NFS share to /var/squashfs
		4. Make sure the RevertChanges function in the RAM_booster script does not delete /var/squashfs when running.
		5. When you revert to a VM snapshot, just follow steps 2, 3 and 4

	The first time, it will obivously take just as long to copy the FS. Every other time, rsync will see
	the similar files already on the NFS share and skip them. rsync runs with --delete, so it will take care of
	anything that should no longer be on the share.

===============================================================

Rewrite Notes:


add a way to automatically download new rupdate and rchroot
make rchroot NOT require manual running of "rupdate -f"

make updating of original OS not REQUIRE creation of squashfs image for RAM Session, that may or may not have been updated

The point of the rewrite is to make the code easier to read and debug
	Make sure the code doesn't become overly complex

Maybe remove some things that complicate the code, like the whole gparted section
	If it is very well organized, and I still think it's important, maybe leave it in

Find out what causes the mounts to fail to unmount

Create new forum thread?

===========================

For now, I skipped the part that asks if we should add a cron job for updates (CronAsk)
since it's hard to test without a working RAM Session

===========================

Check the "Change a few things to make boot process look nicer" section at the end to see if all those fixes are necessary

===========================

I made almost no changes to the grub2 menu entry, except to make it work when indented
1. Make sure it works
2. Is there a way to simplify it, while still having it work in both the RAM Session and the Original OS?

===========================

Split up long sed lines
	I can replace a line in the script file with itself plus my first line, and then
	have a second sed statement that replaces the line I just placed with itself and the
	next line

===========================

Instead of messing with grub and stuff to try to make it so that grub-update always works, can I just have 2 /boot partitions?
	Might not be possible
	The other way is already working - I just need to clean it up

===========================

To make it easier to debug people's problems when they post about them, I should do this:
	Create a log file that:
		Starts out with some info about the setup. Things like:
			/etc/fstab
			fdisk -l
			vgdisplay/lvdisplay if relevant
			commit they are running (in case a later version has already solved that problem)
		Shows every option the user chose
		Shows every command the script ran, including the stdout and stderr
	Idea for how to do it:
		COMMAND() { $@ &>/var/log/somefile.log; return $?; }
		And then run every command like this:
			"COMMAND sed -i ..."
			"COMMAND rsync ..."
the idea is this:
	have the script be relatively clean and simple - if something fails, don't have it spit out large amounts of text on screen
	have a log file that users can upload that makes it very easy to duplicate their setup, and try the same options they did

===========================

I skipped the "Hardlink bug" fix - I couldn't remember what it fixes

===========================

Skipped time bug fix. I'll see if I need it when the RAM Session is bootable

===========================

Download counter
	Either:
		a)

			Do an md5 hash of the external IP of someone,
				and send it to some server I can check
			Warn users I'm doing this, and that I can't
				actually tell what their IP is
		b)
			See if github can already do the counting

===========================

Maybe have a way to revert an update, which with git, should be
	pretty easy

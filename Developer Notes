working on rupdate and rchroot:

	If you want to work on rupdate and rchroot from within the RAM
	Session, it is best not to spend your time copying the scripts
	between the repo and /usr/sbin/. The best way to do this is to:

	$ sudo rm -v /usr/sbin/rchroot /usr/sbin/rupdate
	$ sudo ln -s RAM_Booster/extras_14.10/rupdate /usr/sbin/rupdate
	$ sudo ln -s RAM_Booster/extras_14.10/rchroot /usr/sbin/rchroot
	$ cd RAM_Booster
	$ git config core.fileMode false
	$ chmod a+x extra_14.10/rupdate
	$ chmod a+x extra_14.10/rchroot

	In case it's not obvious, this creates symlinks to the files
	directly in the git repo, and tells git to not care about the
	execute bit of the scripts.

	Note: "Not care" means keep whatever the script files had set for
	execute bits the last time git cared, which in this case was unset

	Note 2: This core.fileMode setting is NOT uploaded during pushes
	to the remote repo

rsync stdout can be hidden at boot by doing the following:

	Edit script
	After live boot installs (Just before 'echo -e "Packages installed successfully\n"' line), add:
		echo "Press Enter"
		read key
	Save and run script
	When script pauses, open different terminal and cd to /lib/live/boot
	Edit 9990-toram-todisk.sh 
	Comment out the 'echo " * Copying $MODULETORAMFILE to RAM" 1>/dev/console' line
	Change both 'rsync -a' lines to 'rsync -aq'
	Save file and continue script

Speed up rsync filesystem copy to /var/squashfs during testing:
	If you are testing this script in a VM over and over again, you can decrease the time
	it takes for the rsync command to copy the entire OS to /var/squashfs. In testing, the time
	needed to copy the FS decreased from about 7m to about 3m.

	Basically:
		1. Setup an NFS server somewhere, and create a share
		2. Create the directory /var/squashfs
		3. Mount the NFS share to /var/squashfs
		4. Make sure the RevertChanges function in the RAM_booster script does not delete /var/squashfs when running.
		5. When you revert to a VM snapshot, just follow steps 2, 3 and 4

	The first time, it will obivously take just as long to copy the FS. Every other time, rsync will see
	the similar files already on the NFS share and skip them. rsync runs with --delete, so it will take care of
	anything that should no longer be on the share.

===============================================================

Rewrite Notes:

	RAM_booster script itself:
		Add a header like my original script has with author name, date, etc

		For now, I skipped the part that asks if we should add
			a cron job for updates (CronAsk) since it's hard
			to test without a working RAM Session

		I made almost no changes to the grub2 menu entry, except to make it work when indented
			1. Make sure it works
			2. Is there a way to simplify it, while still having it work in both the RAM Session and the Original OS?

		Instead of messing with grub and stuff to try to make it so that grub-update always works, can I just have 2 /boot partitions?
			Might not be possible
			The other way is already working - I just need to clean it up

		Split up long sed lines
			I can replace a line in the script file with itself plus my first line, and then
			have a second sed statement that replaces the line I just placed with itself and the
			next line

		Uninstall function
			If I need to, add the code that restores /etc/grub.d/10_linux

		When LVM is used, make sure the LOGGER gets info about how the volume groups and logical volumes are organized, so I can duplicate it

		I skipped the "Hardlink bug" fix - I couldn't remember what it fixes

		Skipped time bug fix. I'll see if I need it when the RAM Session is bootable

		Download counter
			Either:
				a)
					Do an md5 hash of the MAC Address
					or external IP of someone, and
					send it to some server I can check

					Warn users I'm doing this, and
					that I can't actually tell what
					their IP or MAC Address is
				b)
					See if github can already do the counting

	Stop using sed to directly edit rupdate and rchroot - let them use /var/lib/ram_booster/conf to figure stuff out

	rupdate script:
		do NOT include 'rupdate -O'. It's unnecessary (as the
			user can just boot the Original OS) and
			complicates the code a lot

		use /var/lib/ram_booster/conf to find out the root device

	rchroot script:
		make sure rchroot does NOT require manual running of "rupdate -f"

		use /var/lib/ram_booster/conf to find out the root and boot devices

		I use the fact that / is inode 2 in normal root, and something else in a chroot environment
		to make sure the user can't run rchroot from rchroot. The thing is - that only works on ext[234]
		filesystems - apparently xfs uses inode 128. You can check with "ls -di /".
			Source: http://unix.stackexchange.com/questions/14345/how-do-i-tell-im-running-in-a-chroot
			Source: http://stackoverflow.com/questions/75182/detecting-a-chroot-jail-from-within
		
			Make sure my code works in xfs, lvm, and other filesystems. I may have to modify the if statment

	Other:
		add a way to automatically download new rupdate and rchroot

		The point of the rewrite is to make the code easier to read and debug
			Make sure the code doesn't become overly complex

		Maybe remove some things that complicate the code,
			like the whole gparted section


		Find out what causes the mounts to fail to unmount
			Run GUI stuff, install random stuff, and then try to unmount the chroot

		Maybe have a way to revert an update, which with git, should be
			pretty easy

	Do a video:

	Thread on UF.org:
		Probably create a new thread

		Tell users to upload their log files if they have
			technical problems


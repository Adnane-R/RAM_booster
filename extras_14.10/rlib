####################
# Global Variables #
####################

#/boot and / of the Original OS
ROOT_UUID=$(cat /var/lib/ram_booster/conf | grep ROOT_UUID= | sed 's/ROOT_UUID=//g')
BOOT_UUID=$(cat /var/lib/ram_booster/conf | grep BOOT_UUID= | sed 's/BOOT_UUID=//g')
HOME_UUID=$(cat /var/lib/ram_booster/conf | grep HOME_UUID= | sed 's/HOME_UUID=//g')
EFI_UUID=$(cat /var/lib/ram_booster/conf | grep EFI_UUID= | sed 's/EFI_UUID=//g')
DEST=$(cat /var/lib/ram_booster/conf | grep DEST= | sed 's/DEST=//g')
#Remove leading slash from $DEST
DEST="${DEST#/}"
Orig_OS='/mnt/Original_OS'

#Mount $DEST (RAM Session)
MOUNT_RS()
{
	#If the $Orig_OS folder exists, check if
	#anything is using it as a mount point
	if [[ -d "$Orig_OS" ]]
	then
		#If something is mounted, return with an error
		if mountpoint -q "$Orig_OS"
		then
			echo "Failed to mount RAM Session. Is it already mounted?"
			return 1
		fi

		#Try to remove the $Orig_OS
		sudo rmdir "$Orig_OS" &>/dev/null

		#If removing the $Orig_OS folder fails, like if it's
		#not empty, return with an error
		if [[ "$?" != "0" ]]
		then
			echo "Failed to remove old $Orig_OS folder."
			echo "Does it have files in it?"
			return 1
		fi
	fi

	#Make Orig_OS folder
	sudo mkdir -p "$Orig_OS"

	#Try to mount $ROOT_UUID to $Orig_OS
	sudo mount --uuid $ROOT_UUID "$Orig_OS" &>/dev/null ||
	{
		echo "Failed to mount $ROOT_UUID $Orig_OS"
		UMOUNT_RS
		return 1
	}
	
	#Bind /proc
	sudo mount -o bind /proc "$Orig_OS/$DEST/proc" ||
	{
		echo "Failed to bind /proc to ${Orig_OS%/}/${DEST%/}/proc"
		UMOUNT_RS
		return 1
	}

	#Bind /dev
	sudo mount -o bind /dev "$Orig_OS/$DEST/dev" ||
	{
		echo "Failed to bind /dev to ${Orig_OS%/}/${DEST%/}/dev"
		UMOUNT_RS
		return 1
	}

	#Bind /dev/pts
	sudo mount -o bind /dev/pts "$Orig_OS/$DEST/dev/pts" ||
	{
		echo "Failed to bind /dev/pts to ${Orig_OS%/}/${DEST%/}/dev/pts"
		UMOUNT_RS
		return 1
	}

	#Bind /sys
	sudo mount -o bind /sys "$Orig_OS/$DEST/sys" ||
	{
		echo "Failed to bind /sys to ${Orig_OS%/}/${DEST%/}/sys"
		UMOUNT_RS
		return 1
	}

	#Bind /run
	sudo mount -o bind /run "$Orig_OS/$DEST/run" ||
	{
		echo "Failed to bind /run to ${Orig_OS%/}/${DEST%/}/run"
		UMOUNT_RS
		return 1
	}

	#Mount /boot, if it's not on the same partition as /
	if [[ "$BOOT_UUID" != "$ROOT_UUID" ]]
	then
		sudo mount --uuid $BOOT_UUID "$Orig_OS/$DEST/boot" ||
		{
			echo "Failed to mount $BOOT_UUID to ${Orig_OS%/}/${DEST%/}/boot"
			UMOUNT_RS
			return 1
		}
	fi

	#Mount /boot/efi, if we are running an efi system
	if [[ -d /sys/firmware/efi ]] && [[ "$EFI_UUID" != "None" ]]
	then
		sudo mount --uuid $EFI_UUID "$Orig_OS/$DEST/boot/efi" ||
		{
			echo "Failed to mount $EFI_UUID to ${Orig_OS%/}/${DEST%/}/boot/efi"
			UMOUNT_RS
			return 1
		}
	fi
	
	#Mount /home, if it's not on the same partition as /
	if [[ "$HOME_UUID" != "$ROOT_UUID" ]]
	then
		sudo mount --uuid $HOME_UUID "$Orig_OS/$DEST/home" ||
		{
			echo "Failed to mount $HOME_UUID to ${Orig_OS%/}/${DEST%/}/home"
			UMOUNT_RS
			return 1
		}
	fi
}

#Unmount $DEST (RAM Session)
UMOUNT_RS()
{
	echo "Unmounting"
	#THIS CODE IS FOR TESTING PURPOSES ONLY
	sudo umount -v /mnt/Original_OS/var/squashfs/proc
	sudo umount -v /mnt/Original_OS/var/squashfs/dev/pts
	sudo umount -v /mnt/Original_OS/var/squashfs/dev
	sudo umount -v /mnt/Original_OS/var/squashfs/run
	sudo umount -v /mnt/Original_OS/var/squashfs/sys
	sudo umount -v /mnt/Original_OS/home
	sudo umount -v /mnt/Original_OS/
	sudo rmdir /mnt/Original_OS
}

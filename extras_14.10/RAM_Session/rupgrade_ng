#!/bin/bash

#Written On: Dec 2014
#Written By: Tal
#Written For: Ubuntu Forums Community
#Description: 
#	This script downloads the latest bug fixes to the RAM Booster project

############################
# Only run if user is root #
############################

uid=$(/usr/bin/id -u) && [ "$uid" = "0" ] ||  
{
        clear
        echo "You must be root to run $0."
        echo "Try again with the command 'sudo $0'"
        exit 1
} 

##################################################################################
# Check if the user is trying to run this script from outside of the RAM Session #
##################################################################################

if [ ! -e /RAM_Session ]
then
        clear
        echo "This script cannot be run from outside of the RAM Session."
        exit 0
fi

##########################################################################
# Check if the user is trying to run this script from inside of a chroot #
##########################################################################

if [[ "$(ls -di / | cut -d ' ' -f 1)" != 2 ]] && [[ "$(ls -di / | cut -d ' ' -f 1)" != 128 ]]
then
        echo "This script cannot be run from inside of a chroot"
        exit 0
fi

###################
# Check arguments #
###################

#If true, user chose to only check for updates - not apply them
#false otherwise
CHECK_ONLY=false

if [[ $# != 0 ]] && [[ $# != 1 ]]
then
	echo "Invalid number of arguments"
	exit 1
fi

case $1 in
	"")
		#No arguments is fine
		;;
	--check)
		CHECK_ONLY=true
		;;
	*)
		echo "Error: \"$1\" is an invalid argument"
		exit 1
		;;
esac

#############################
# Check if git is installed #
#############################

if ! dpkg -l git | grep -q $'^ii[ \t]*git[ \t]'
then
        clear
        echo "You need to install git before running this script"
        echo "Try running \"sudo apt-get install git\""
        exit 1
fi

##########################################################
# Source the file with all the functions for this script #
##########################################################

if [[ -e $RLIB ]]
then
	. $RLIB

	#Check if there was a problem
	if [[ "$?" != "0" ]]
	then
		echo
		echo "The library that comes with RAM Booster ($RLIB) failed to be sourced"
		echo "Is it broken?"
		exit 1
	fi
else
	clear
	echo "The library that comes with RAM Booster ($RLIB) was not found!"
	exit 1
fi

#########################################################
# Download the latest version of the RAM Booster script #
#########################################################

#Delete it if it's left over from a previous attempt to update
if [[ -d /tmp/RAM_Booster ]]
then
	rm -rf /tmp/RAM_Booster
fi

#git clone git://github.com/terminator14/RAM_Booster.git /tmp/RAM_Booster &>/dev/null
git clone /home/test/Documents/test /tmp/RAM_Booster &>/dev/null

if [[ $? != 0 ]]
then
	echo "Failed to download RAM_Booster git repo"
	exit 1
fi

#DEBUG ONLY
#(cd /tmp/RAM_Booster; git checkout -b rewrite origin/rewrite)

################
# Setup a trap #
################

trap 'UMOUNT_RS; sudo rm -rf /tmp/RAM_Booster' EXIT SIGINT

############################################################
# Figure out the path of the script folder in the git repo #
############################################################

OS_NAME=$(cat /etc/os-release | grep PRETTY_NAME | grep -o "\"[^\"]*\"" | tr -d '"')
UBUNTU_VERSION=$(cat /etc/os-release | grep VERSION_ID | grep -o "\"[^\"]*\"" | tr -d '"')
if [[ -d /tmp/RAM_Booster/extras_$UBUNTU_VERSION ]]
then
	SCRIPT_DIR=extras_$UBUNTU_VERSION
elif [[ -d /tmp/RAM_Booster/old/extras_$UBUNTU_VERSION ]]
then
	SCRIPT_DIR=old/extras_$UBUNTU_VERSION
	echo "The script for your version of Ubuntu ($OS_NAME) appears to be old"
	echo "You may want to check if the RAM Booster script exists for a newer"
	echo "version of Ubuntu, and if so, update your system and use the new script"
	echo
else
	echo "A script for $OS_NAME could not be found in the github RAM Booster repo"
	exit 1
fi

###########################################
# Check which files need to be updated    #
# Vars set to true when updates required  #
# Vars set to false otherwise             #
# Note: Do NOT change the default (false) #
###########################################

RLIB=false
REDIT=false
RUPDATE=false
UPDATE_NOTIFIER=false
GRUB_06_RAMSESS=false
POSTINST_VERSION_CHECK=false
POSTINST_SORT_KERNELS=false
POSTINST_RAM_SESSION_INITRAMFS=false
POSTINST_WARN=false

#Take exactly 4 args:
# 1. Path to script in the git repo
# 2. Path to script in the filesystem when installed
# 3. Permissions in the form (###)
# 4. Ownership in the form user:group
#Returns:
# 0: Updates successful
# 1: Updates not required
# 2: Updates required, but not done (--check mode)
# 3: Updates failed
CheckForUpdates() {
	GIT_SCRIPT=$1
	INSTALLED_SCRIPT=$2
	PERMS=$3
	OWNER=$4

	#Check permissions arg
	#Note: Mostly for debugging - user should never see this error
	if ! echo $PERMS | grep -qx '[0-9]\{3\}'
	then
		echo "Invalid permissions passed to CheckForUpdates function"
		exit 1
	fi

	#Check ownership arg
	#Note: Mostly for debugging - user should never see this error
	if ! echo $OWNER | grep -qx '[a-Z]:[a-Z]'
	then
		echo "Invalid ownership passed to CheckForUpdates function"
		exit 1
	fi

	################################
	# Check file on running system #
	################################

	#Check if the script exists in the git repo we just downloaded
	if [[ ! -e $GIT_SCRIPT ]]
	then
		echo "The latest version of the git repo does not have the $(basename $GIT_SCRIPT) script"
		return 3
	fi

	#Check if script is installed in the running system
	if [[ ! -e $INSTALLED_SCRIPT ]]
	then
		if $CHECK_ONLY
		then
			echo "$INSTALLED_SCRIPT not installed"
			return 2
		else
			echo "Installing $INSTALLED_SCRIPT"
			sudo cp $GIT_SCRIPT $INSTALLED_SCRIPT
			sudo chmod $PERMS $INSTALLED_SCRIPT
			sudo chown $OWNER $INSTALLED_SCRIPT
		fi
	fi

	#Check the md5s
	MD5_OF_REPO_FILE=$(md5sum $GIT_SCRIPT | cut -d ' ' -f 1)
	MD5_OF_INSTALLED_FILE=$(md5sum $INSTALLED_SCRIPT | cut -d ' ' -f 1)

	if [[ $MD5_OF_REPO_FILE != $MD5_OF_INSTALLED_FILE ]]
	then
		if $CHECK_ONLY
			echo "$INSTALLED_SCRIPT: update available"
			return 2
		else
			echo "Updating $INSTALLED_SCRIPT"

			sudo rm -f $INSTALLED_SCRIPT
			sudo cp $GIT_SCRIPT $INSTALLED_SCRIPT
			sudo chmod $PERMS $INSTALLED_SCRIPT
			sudo chown $OWNER $INSTALLED_SCRIPT

			return 0
		fi
	else
		echo "$INSTALLED_SCRIPT: up to date"
		return 1
	fi


	################################
	# Check file on squashfs image #
	################################

	MOUNT_RS root_only
}

#!/bin/bash

#Written On: Dec 2014
#Written By: Tal
#Written For: Ubuntu Forums Community
#Description: 
#	This script downloads the latest bug fixes to the RAM Booster project

############################
# Only run if user is root #
############################

uid=$(/usr/bin/id -u) && [ "$uid" = "0" ] ||  
{
        clear
        echo "You must be root to run $0."
        echo "Try again with the command 'sudo $0'"
        exit 1
} 

##################################################################################
# Check if the user is trying to run this script from outside of the RAM Session #
##################################################################################

if [ ! -e /RAM_Session ]
then
        clear
        echo "This script cannot be run from outside of the RAM Session."
        exit 0
fi

##########################################################################
# Check if the user is trying to run this script from inside of a chroot #
##########################################################################

if [[ "$(ls -di / | cut -d ' ' -f 1)" != 2 ]] && [[ "$(ls -di / | cut -d ' ' -f 1)" != 128 ]]
then
        echo "This script cannot be run from inside of a chroot"
        exit 0
fi

###################
# Check arguments #
###################

#If true, user chose to only check for updates - not apply them
#false otherwise
CHECK_ONLY=false

if [[ $# != 0 ]] && [[ $# != 1 ]]
then
	echo "Invalid number of arguments"
	exit 1
fi

case $1 in
	"")
		#No arguments is fine
		;;
	--check)
		CHECK_ONLY=true
		;;
	*)
		echo "Error: \"$1\" is an invalid argument"
		exit 1
		;;
esac

#############################
# Check if git is installed #
#############################

if ! dpkg -l git | grep -q $'^ii[ \t]*git[ \t]'
then
        clear
        echo "You need to install git before running this script"
        echo "Try running \"sudo apt-get install git\""
        exit 1
fi

##########################################################
# Source the file with all the functions for this script #
##########################################################

if [[ -e $RLIB ]]
then
	. $RLIB

	#Check if there was a problem
	if [[ "$?" != "0" ]]
	then
		echo
		echo "The library that comes with RAM Booster ($RLIB) failed to be sourced"
		echo "Is it broken?"
		exit 1
	fi
else
	clear
	echo "The library that comes with RAM Booster ($RLIB) was not found!"
	exit 1
fi

#########################################################
# Download the latest version of the RAM Booster script #
#########################################################

#Delete it if it's left over from a previous attempt to update
if [[ -d /tmp/RAM_Booster ]]
then
	rm -rf /tmp/RAM_Booster
fi

git clone git://github.com/terminator14/RAM_Booster.git /tmp/RAM_Booster &>/dev/null

if [[ $? != 0 ]]
then
	echo "Failed to download RAM_Booster git repo"
	exit 1
fi


################
# Setup a trap #
################

trap 'UMOUNT_RS; sudo rm -rf /tmp/RAM_Booster' EXIT SIGINT

############################################################
# Figure out the path of the script folder in the git repo #
############################################################

OS_NAME=$(cat /etc/os-release | grep PRETTY_NAME | grep -o "\"[^\"]*\"" | tr -d '"')
UBUNTU_VERSION=$(cat /etc/os-release | grep VERSION_ID | grep -o "\"[^\"]*\"" | tr -d '"')
if [[ -d /tmp/RAM_Booster/extras_$UBUNTU_VERSION ]]
then
	SCRIPT_DIR=extras_$UBUNTU_VERSION
elif [[ -d /tmp/RAM_Booster/old/extras_$UBUNTU_VERSION ]]
then
	SCRIPT_DIR=old/extras_$UBUNTU_VERSION
	echo "The script for your version of Ubuntu ($OS_NAME) appears to be old"
	echo "You may want to check if the RAM Booster script exists for a newer"
	echo "version of Ubuntu, and if so, update your system and use the new script"
	echo
else
	echo "A script for $OS_NAME could not be found in the github RAM Booster repo"
	exit 1
fi

###########################################
# Check which files need to be updated    #
# Vars set to true when updates required  #
# Vars set to false otherwise             #
# Note: Do NOT change the default (false) #
###########################################

RLIB=false
REDIT=false
RUPDATE=false
UPDATE_NOTIFIER=false
GRUB_06_RAMSESS=false
POSTINST_VERSION_CHECK=false
POSTINST_SORT_KERNELS=false
POSTINST_RAM_SESSION_INITRAMFS=false
POSTINST_WARN=false

#############################
# Check AND Update rupgrade #
#############################

PATH_TO_REPO_FILE=/tmp/RAM_Booster/$SCRIPT_DIR/RAM_Session/rupgrade
PATH_TO_INSTALLED_FILE=/usr/sbin/rupgrade
PERMS=755

if [[ ! -e $PATH_TO_REPO_FILE ]]
then
	echo "Error: The latest version of the repo does not have an rupgrade script"
	exit 1
fi

if [[ ! -e $PATH_TO_INSTALLED_FILE ]]
then
	if $CHECK_ONLY
	then
		echo "Error: rupgrade is not installed, and you are running in --check mode"
		exit 1
	else
		echo "Installing $PATH_TO_INSTALLED_FILE"
		sudo cp $PATH_TO_REPO_FILE $PATH_TO_INSTALLED_FILE
		sudo chmod $PERMS $PATH_TO_INSTALLED_FILE
	fi
fi

#Check the md5s
MD5_OF_REPO_FILE=$(md5sum $PATH_TO_REPO_FILE | cut -d ' ' -f 1)
MD5_OF_INSTALLED_FILE=$(md5sum $PATH_TO_INSTALLED_FILE | cut -d ' ' -f 1)

if [[ $MD5_OF_REPO_FILE != $MD5_OF_INSTALLED_FILE ]]
then
	if $CHECK_ONLY
	then
		echo "A new version of the rupgrade script is available"
		echo "Run $0 without \"--check\" to install it"
		echo "Note: rupgrade must be updated before the other scripts are"
		exit 0
	else
		echo "Updating $PATH_TO_INSTALLED_FILE"

		sudo rm -f $PATH_TO_INSTALLED_FILE
		sudo cp $PATH_TO_REPO_FILE $PATH_TO_INSTALLED_FILE
		sudo chmod $PERMS $PATH_TO_INSTALLED_FILE

		echo "Running new rupgrade script..."

		#We are NOT exiting so the trap that deletes /tmp/RAM_Booster
		#shouldn't fire here, so we do it manually
		sudo rm -rf /tmp/RAM_Booster

		exec /usr/sbin/rupgrade
	fi
fi

##############
# Check RLIB #
##############

PATH_TO_REPO_FILE=/tmp/RAM_Booster/$SCRIPT_DIR/RAM_Session/rlib
PATH_TO_INSTALLED_FILE=/var/lib/ram_booster/rlib
PERMS=


MD5_OF_REPO_FILE=$(md5sum $PATH_TO_REPO_FILE | cut -d ' ' -f 1)
MD5_OF_INSTALLED_FILE=$(md5sum $PATH_TO_INSTALLED_FILE | cut -d ' ' -f 1)

if [[ $MD5_OF_REPO_FILE != $MD5_OF_INSTALLED_FILE ]]
then
	RLIB=true
fi

###############
# Check Redit #
###############

PATH_TO_REPO_FILE=/tmp/RAM_Booster/$SCRIPT_DIR/RAM_Session/redit
PATH_TO_INSTALLED_FILE=/usr/sbin/redit
PERMS=


MD5_OF_REPO_FILE=$(md5sum $PATH_TO_REPO_FILE | cut -d ' ' -f 1)
MD5_OF_INSTALLED_FILE=$(md5sum $PATH_TO_INSTALLED_FILE | cut -d ' ' -f 1)

if [[ $MD5_OF_REPO_FILE != $MD5_OF_INSTALLED_FILE ]]
then
	REDIT=true
fi

#################
# Check rupdate #
#################

#########################
# Check update-notifier #
#########################

####################
# Check 06_RAMSESS #
####################

#######################################
# Check Postinst Version Check Script #
#######################################

######################################
# Check Postinst Sort Kernels Script #
######################################

###############################################
# Check Postinst RAM Session Initramfs Script #
###############################################

##############################
# Check Postinst Warn script #
##############################

#######################################################################
# Check if we were only supposed to check for updates and not do them #
#######################################################################

########################################################################
# Run update scripts                                                   #
# Note: The update scripts are ALWAYS run and MUST make sure that they #
# check if the changes they make have already been applied             #
########################################################################

for FILE in $(find /tmp/RAM_Booster/$SCRIPT_DIR/Update_Scripts -type f -iname "*.sh")
do
	echo "Running $(basename $FILE)"
	chmod a+x $FILE
	$FILE

	if [[ $? != 0 ]]
	then
		echo "$(basename $FILE) exited with an error"
		echo "Stopping upgrade"
		exit 1
	fi
done

###############
# Update rlib #
###############

if $RLIB
then
	:
fi

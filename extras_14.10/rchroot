#!/bin/bash

############################
# Only run if user is root #
############################

uid=$(/usr/bin/id -u) && [ "$uid" = "0" ] || 
{
	clear
	echo "You must be root to run $0."
	echo "Try again with the command 'sudo $0'"
	exit 1
} 

##################################################################################
# Check if the user is trying to run this script from outside of the RAM Session #
##################################################################################

if [ ! -e /RAM_Session ]
then
	clear
	echo "This script cannot be run from outside of the RAM Session."
	exit 0
fi

####################
# Global Variables #
####################

#Path to the file that contains all the functions for this script
RLIB=/var/lib/ram_booster/rlib
#Figure out $DEST
DEST=$(cat /var/lib/ram_booster/conf | grep DEST= | sed 's/DEST=//g')
#Must be the same as the one in rlib
Orig_OS='/mnt/Original_OS/'

##########################################################
# Source the file with all the functions for this script #
##########################################################

if [[ -e $RLIB ]]
then
        . $RLIB

	#Check if there was a problem
	if [[ "$?" != "0" ]]
	then
		echo
		echo "The library that comes with RAM Booster ($RLIB) failed to be sourced"
		echo "Is it broken?"
		exit 1
	fi
else
        clear
        echo "The library that comes with RAM Booster ($RLIB) was not found!"
        exit 1
fi

################################
# Try to mount the RAM Session #
################################

#Mount the RAM Session, and bind all the pseudo filesystems to it
MOUNT_RS || exit 1

#Let user into the chroot
sudo chroot $Orig_OS/$DEST/ /bin/bash

#Unmount everything
UMOUNT_RS

#If there was a problem unmounting stuff, tell user to reboot
if [[ "$?" != "0" ]]
then
	clear
	echo "There was an error unmounting ${Orig_OS%/}/${DEST#/}"
	echo "A reboot should fix that"
	echo "After the reboot, if you need to save your changes by recreating"
	echo "the squashfs image, just run \"sudo rchroot\" and exit it"
	exit 1
fi

#Ask user if he wants to recreate filesystem.squashfs
clear
echo "Would you like to save your changes by recreating the squashfs image?"
echo "This may take some time to complete"
echo "You may use the computer normally during this process - you will NOT disrupt it"
echo
read -p "Your choice [y/N]: " answer
clear

#Convert answer to lowercase
answer=$(toLower $answer)

case $answer in
	y|yes)  
		#Falls through to the part that creates the squashfs image
		;;
	*)
		echo "You chose to NOT recreate the squashfs image"
		echo "If you change your mind, run 'sudo rchroot' again, and exit it"
		exit 0
		;;
esac

echo "Creating squashfs image"
#Create squashfs image
MOUNT_RS root_only || exit 1

sudo mksquashfs ${Orig_OS%/}/${DEST#/} ${Orig_OS%/}/live/filesystem.squashfs.new -noappend -always-use-fragments

if [[ "$?" != "0" ]]
then
	echo "Failed to create ${Orig_OS%/}/live/filesystem.squashfs"
	UMOUNT_RS
	exit 1
fi

sudo mv ${Orig_OS%/}/live/filesystem.squashfs.new ${Orig_OS%/}/live/filesystem.squashfs

if [[ "$?" == "0" ]]
then
	echo "mksquashfs created successfully"
	UMOUNT_RS
fi
